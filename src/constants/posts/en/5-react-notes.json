{
  "id": 5,
  "date": "Aug 10, 2024",
  "category": 1,
  "image": "dev/react.webp",
  "title": "Notes on React",
  "author": "Petro Borovets",
  "headSection": {
    "headingText": "React, sometimes referred to as a frontend JavaScript framework, but actually is a free, open-source FE library created by Facebook. It is maintained by Meta and a community of individual developers and companies. Library can be utilized to build single-page applications, mobile apps, or server-rendered apps with frameworks such as Next.js. Since React focuses solely on the user interface and rendering components to the DOM, applications built with React often depend on additional libraries for routing and other client-side functionalities.",
    "headingSubText": "A major benefit of React is its ability to only rerender the parts of the page that have changed, thus avoiding the unnecessary re-rendering of elements that remain unchanged. React was initially released on May 29, 2013."
  },
  "sections": [
    {
      "id": 1,
      "heading": "Content",
      "children": [
        {
          "id": 1,
          "type": "list",
          "value": [
            "Overview",
            "Components, props, JSX",
            "State, events and Forms: Interactive Components",
            "State management",
            "How React works behind the scenes",
            "Effects and Data Fetching",
            "Hooks, Refs and More State",
            "Advanced State Management: The Context API"
          ]
        }
      ]
    },
    {
      "id": 2,
      "heading": "Overview",
      "children": [
        {
          "id": 1,
          "type": "paragraph",
          "value": "React allows developers to create reusable UI components, manage the state of these components efficiently, and build complex interfaces with a declarative approach."
        },
        {
          "id": 2,
          "type": "paragraph",
          "value": "Here are some key features of React:"
        },
        {
          "id": 3,
          "type": "list",
          "value": [
            "<b>Component-Based Architecture</b>: React encourages the development of applications using small, reusable components. Each component encapsulates its own logic and rendering, making the code more modular and easier to maintain.",
            "<b>Virtual DOM</b>: React uses a virtual DOM to optimize rendering performance. When a component's state changes, React updates the virtual DOM first and then efficiently reconciles and updates only the parts of the real DOM that have changed.",
            "<b>Declarative Syntax</b>: React allows developers to describe what the UI should look like for a given state using a declarative syntax, making it easier to understand and manage the code.",
            "<b>JSX (JavaScript XML)</b>: React uses JSX, a syntax extension that allows you to write HTML-like code within JavaScript. JSX makes the code more readable and easier to write by combining the power of JavaScript with the simplicity of HTML.",
            "<b>State Management</b>: React provides a mechanism to manage component state, allowing components to respond to user inputs and other events dynamically. State management is essential for creating interactive UIs.",
            "<b>One-Way Data Binding</b>: React uses one-way data binding, meaning that data flows in a single direction - from parent to child components. This makes it easier to track changes and debug applications.",
            "<b>React Hooks</b>: Introduced in React 16.8, hooks are functions that let you use state and other React features without writing class components. Hooks like <code>useState</code>, <code>useEffect</code>, and <code>useContext</code> simplify state management and side effects.",
            "<b>React Router</b>: React Router is a library for handling routing in React applications, enabling navigation between different views or pages without reloading the entire application."
          ]
        }
      ]
    },
    {
      "id": 3,
      "heading": "Components, props, JSX",
      "children": [
        {
          "id": 1,
          "type": "paragraph",
          "value": "<b>Components</b> are the building blocks of a React application. They encapsulate parts of the user interface and manage their own state and behavior. There are two types of components: <b>Functional Components</b> and <b>Class Components</b>."
        },
        {
          "id": 2,
          "type": "list",
          "value": [
            "<b>Functional components</b> are Functions that return React elements. They can use hooks to manage state and side effects.",
            "<b>Class components</b> are ES6 classes that extend <b>React.Component</b>. They have lifecycle methods and can manage state using <code>this.state</code>."
          ]
        },
        {
          "id": 3,
          "type": "image",
          "value": "dev/react-post/1-read-only-props.png"
        },
        {
          "id": 4,
          "type": "paragraph",
          "value": "<b>Props</b> (short for properties) are a way to pass data from a parent component to a child component. Props are read-only and help to make components reusable by allowing them to receive data and configuration from their parent. So in React we have only one way data flow. <br><b>Accessing Props:</b> In functional components, props are accessed directly as function arguments. In class components, they are accessed via <code>this.props</code>. "
        },
        {
          "id": 5,
          "type": "image",
          "value": "dev/react-post/2-one-way data-flow.png"
        },
        {
          "id": 6,
          "type": "paragraph",
          "value": "<b>JSX (JavaScript XML)</b> is a syntax extension for JavaScript that allows you to write HTML-like code within JavaScript. It makes it easier to create React elements and components. JSX is compiled to <code>React.createElement</code> calls, which produce JavaScript objects that describe the UI."
        },
        {
          "id": 7,
          "type": "image",
          "value": "dev/react-post/3-jsx-rules.png"
        },
        {
          "id": 8,
          "type": "paragraph",
          "value": "<b>So, lets sum-up:</b>"
        },
        {
          "id": 9,
          "type": "list",
          "value": [
            "<b>Components:</b> Reusable pieces of UI that can be either functional or class-based.",
            "<b>Props:</b> Mechanism for passing data to components, making them dynamic and reusable.",
            "<b>JSX:</b> Syntax extension that allows you to write HTML-like code in JavaScript, making the creation of React elements more intuitive."
          ]
        }
      ]
    },
    {
      "id": 4,
      "heading": "State, events and Forms: Interactive Components",
      "children": [
        {
          "id": 1,
          "type": "paragraph",
          "value": "In React, <b>state</b> is a core concept used to manage data that changes over time and affects how a component renders. State is an object that represents the parts of the <b>component</b> that can change and is managed within the component itself."
        },
        {
          "id": 2,
          "type": "image",
          "value": "dev/react-post/7-react-naming.png"
        },
        {
          "id": 3,
          "type": "paragraph",
          "value": "Both <b>state</b> and <b>props</b> are used to manage data within components, but they serve different purposes and have distinct characteristics."
        },
        {
          "id": 4,
          "type": "image",
          "value": "dev/react-post/8-state-vs-props.png"
        }
      ]
    },
    {
      "id": 5,
      "heading": "State management",
      "children": [
        {
          "id": 1,
          "type": "paragraph",
          "value": "Knowing <b>when</b> and <b>where</b> to use <b>state</b> is crucial for building efficient and maintainable React applications. Hereâ€™s a guide on how to use state effectively:"
        },
        {
          "id": 2,
          "type": "image",
          "value": "dev/react-post/11-state-where-when.png"
        },
        {
          "id": 3,
          "type": "paragraph",
          "value": "Lets take a look at the example below.<br>Please check UI mockup on the right side of the diagram, we have 3 components:<br>- Parent: <b>Checkout</b>, <br>- Two children: <b>Total</b> and <b>Promotions</b>.<br>Since <b>Promotions</b> component uses <b>coupons</b>, the logical step would be to place <b>coupons</b> state on the component level. But we quickly realize that <b>Total</b> component should be aware of coupons as well. How can we solve this issue?"
        },
        {
          "id": 4,
          "type": "image",
          "value": "dev/react-post/12-state-sharing-with-sibling-component-problem.png"
        },
        {
          "id": 5,
          "type": "paragraph",
          "value": "Solution to this problem would be to \"Lift up\" the State to parent <b>Checkout</b> component and share this state with children using props. Here is how it work:"
        },
        {
          "id": 6,
          "type": "image",
          "value": "dev/react-post/13-lifting-up-the-state.png"
        }
      ]
    },
    {
      "id": 6,
      "heading": "How React works behind the scenes",
      "children": [
      ]
    },
    {
      "id": 11,
      "heading": "Notes / question-answers",
      "children": [
        {
          "id": 1,
          "type": "list",
          "value": [
            "Reacts <code>useState</code> <b>hook</b> returns an array with 2 properties:<br>First - current state of the property,<br>Second - function that you use to update the state of the property.<br>Ex: <code>const [value, setValue] = useState(someValue)</code> where <code>someValue</code> is an initial state of the value.",
            "All react functions that start with <code>use</code> keyword are react hooks.",
            "You can only call <b>hooks</b> on the top level of component function.",
            "What is <b>Derived State</b>? - <b>Derived State</b>: state that is computed from an existing peace of state or from props.",
            "<b>Component</b> vs <b>Instance</b> vs <b>Element</b>:<br>- <b>Component</b> is a code blueprint,<br>- <b>Instance</b> is a \"physical\" representation of the component. <br>- <b>Element</b>: Now, as we know components return JSX which is converted to <code>React.createElement</code> function calls, so <b>Element</b> is a result of usage of <b>Component</b> in our code -it is simply a big immutable javascript object that React keeps in memory. React <b>Element</b> contains all necessary information in order to create DOM elements for the current component instance."
          ]
        }
      ]
    }
  ]
}